//
// Access types 1
//
system Hello using (task_implementation => cyclic) is

  package Target is separate("TargetCPU16.rihtan");

  shared package TerminalIO is separate;

  Print    : procedure renames TerminalIO.PrintString;
  NewLine  : procedure renames TerminalIO.NewLine;
  PrintNum : procedure renames TerminalIO.PrintNumber;

  type Measurement is record
    Value    : range 0..255;
    ErrorEst : range 0..20;
  end record;

  // Create a measurement on the heap
  // 'access new Measurement' means an access type that was returned by 'new'
  // and cannot be null
  procedure MakeMeasurement(
      Val  : in Measurement.Value'type;
      Err  : in Measurement.ErrorEst'type;
      Meas : out access new Measurement) is
  begin
    Meas := new (Value => Val, ErrorEst => Err);
  end MakeMeasurement;

  // 'access constant' means that the accessed value cannot be changed
  procedure DisplayMeasurement(Meas : in access constant Measurement) is
  begin
    // The object accessed by Meas is Meas.all
    // Meas.Value is an abbreviation for Meas.all.Value
    PrintNum(Meas.Value);
    Print(" +/- ");
    PrintNum(Meas.ErrorEst);
  end DisplayMeasurement;

  // Forward declare MeasurementListElt so that it can be used to declare
  // an access type within its own definition.
  type MeasurementListElt;

  type MeasurementListElt is record
    Meas : Measurement;
    Next : access or null new MeasurementListElt;
  end record;
  // 'access or null new T' means created by 'new', or possibly null

  Head, Tail : access or null new MeasurementListElt;

  procedure CopyToList(M : in Measurement) is
  begin
    if Tail = null then
      Tail := new (Meas => M, Next => null);
      Head := Tail;
    else
      Tail.Next := new (Meas => M, Next => null);
      Tail := Tail.Next;
    end if;
    // Either way, at this point Head will have been initalised
    pragma unchecked_initialisation(Head);
  end CopyToList;

  procedure PrintList is
    // 'access or null T' means access to T, or else null. However it cannot be used
    // as a parameter to free (it would need to be 'access or null new T')
    M : access or null MeasurementListElt;
  begin
    M := Head;
    while M /= null loop
      DisplayMeasurement(M.Meas'access);
      Print(" ");
      M := M.Next;
    end loop;
    NewLine;
  end PrintList;

  main procedure Access1 is
    // 'access new T' means access to a T that was allocated on the heap by new (and not null)
    type AccessMeasurement is access new Measurement;
    M1, M2, M3 : AccessMeasurement;
    Meas4 : Measurement;
  begin
    MakeMeasurement(Val => 10, Err => 1, Meas => M1);
    MakeMeasurement(Val => 20, Err => 2, Meas => M2);
    MakeMeasurement(Val => 30, Err => 3, Meas => M3);
    // DisplayMeasurement expects an 'access Measurement' value, which
    // cannot be null by definition. We can assign an 'access new T' value to
    // and 'access T' value without checking for null. An 'access T' value
    // cannot be used as the argument to 'free'.
    DisplayMeasurement(M1); NewLine;
    DisplayMeasurement(M2); NewLine;
    DisplayMeasurement(M3); NewLine;
    CopyToList(M1.all);
    CopyToList(M2.all);
    CopyToList(M3.all);
    PrintList;
    free M1;
    free M2;
    free M3;
    Meas4 := (Value => 100, ErrorEst => 5);
    // Create an access value to the local variable Meas4
    // 'access creates an 'access T' value, not an 'access new T' value
    // Therefore it cannot be used erroneously with 'free', or assigned to
    // a global, thereby potentially creating a dangling pointer.
    DisplayMeasurement(Meas4'access);
    NewLine;
    Print("Done"); NewLine;
  end Access1;

begin
  Tail := null;
end Hello;

