//
// Representation for integers, lookup tables
//
system Hello using (task_implementation => cyclic) is

  package Target is separate("TargetCPU16.rihtan");

  shared package TerminalIO is separate;

  Print    : procedure renames TerminalIO.PrintString;
  NewLine  : procedure renames TerminalIO.NewLine;
  PrintNum : procedure renames TerminalIO.PrintNumber;

  // Specify the word type explicitly (the word type is from the target definitions)
  type Sensor_register is range -10..63 using (word_type => signed_16);

  // Word type and first value (value of 'Reset', other values are 0x11, 0x12)
  type IO_status is (Reset, Busy, Available)
    using (word_type => unsigned_16, first_value => 0x10);
  
  // Literal address and access mode 'mapped_device' for memory-mapped device
  IOStat1 : IO_status using (address => 0x4000, access_mode => mapped_device);
  // Reference to a C variable (with 'extern')
  Sensor1 : Sensor_register using (external => "sensreg", access_mode => mapped_device);
  // Reference to a C variable or field (without 'extern')
  Sensor2 : Sensor_register using (reference => "regset.sensor", access_mode => mapped_device);
  
  // Volatile (e.g. for sharing with a C thread)
  Flag1 : range 0..1 using (access_mode => volatile);
  // Word type and access mode for an anonymous type
  Flag2 : (range 0..1 using (word_type => unsigned_8)) using (access_mode => volatile);

  // Specify the generated C name of the variable
  Status1 : IO_status using (cname => "__status");

  // These pragmas are to avoid a compilation error in this test program, because
  // there's no code that uses these variables
  pragma unchecked_initialisation(Flag1, Flag2, Status1);
  pragma unchecked_use(Flag1, Flag2, Status1);

  // Specify the C name of a manifest constant (this becomes a #define)
  NumRegisters : constant := 10 * 2 using (cname => "__NUMREG");

  // Specify the C names of enumeration constants (which become #defines)
  type RunStatus is (Start using (cname => "RSTART"),
                     Run   using (cname => "RRUN"),
                     Stop  using (cname => "RSTOP"));

  // A lookup table
  // Access_mode image means a constant intended to be included in the program image (e.g. ROM)
  InitialStatus1 : array [range 0..3] of IO_status :=
    [ 0 => Reset, 1 => Busy, 2 => Reset, 3 => Available ]
  using (access_mode => image);

  pragma unchecked_use(InitialStatus1);

  // or
  // Usage library means that it is not an error if the table is not referenced anywhere,
  // and the table wil be excluded from the target program if that is the case.
  InitialStatus2 : array [range 0..3] of IO_status :=
    [ Reset, Busy, Reset, Available ]
  using (access_mode => image, usage => library);

  // Another lookup table. Usage target_library means that the table will be included
  // even if it is not referenced elsewhere, and not to reference it is not an error.
  RangeTable :
    array [range 1..3] of
      record
        Min : range 0..9;
        Max : range 0..9;
      end record :=
    [ 1 => (Min => 0, Max => 9), 2 => (Min => 3, Max => 4), 3 => (Min => 1, Max => 8) ]
  using (access_mode => image, usage => target_library);
  
  main procedure Test is
  begin
    null;
  end Test;

end Hello;

